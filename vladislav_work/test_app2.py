import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import joblib
import os
import plotly.graph_objects as go
import plotly.express as px
from catboost import CatBoostRegressor
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append('.')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
from model_script import ReinforcementPriceModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É",
    page_icon="üìä",
    layout="wide",
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(file_path):
    try:
        return pd.read_csv(file_path)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω
def plot_historical_prices(data, date_col, price_col):
    fig = px.line(data, x=date_col, y=price_col, title='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
    fig.update_layout(
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–¶–µ–Ω–∞',
        height=500,
    )
    return fig

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
def plot_forecast(historical_data, forecast_data, date_col, price_col):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    hist_df = historical_data.copy()
    hist_df['–¢–∏–ø'] = '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ DataFrame
    forecast_df = pd.DataFrame(forecast_data['weekly_predictions'])
    forecast_df.rename(columns={'dt': date_col, 'price': price_col}, inplace=True)
    forecast_df['–¢–∏–ø'] = '–ü—Ä–æ–≥–Ω–æ–∑'
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    combined_df = pd.concat([
        hist_df[[date_col, price_col, '–¢–∏–ø']].tail(52),  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        forecast_df[[date_col, price_col, '–¢–∏–ø']]
    ])
    combined_df[date_col] = pd.to_datetime(combined_df[date_col])
    
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    fig = px.line(combined_df, x=date_col, y=price_col, color='–¢–∏–ø',
                 title='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
    fig.update_layout(
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–¶–µ–Ω–∞',
        height=500,
        legend_title='–î–∞–Ω–Ω—ã–µ'
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    current_date = hist_df[date_col].max()
    fig.add_vline(x=current_date, line_dash="dash", line_color="gray",
                 annotation_text="–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞", annotation_position="top right")
    
    return fig

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data_option = st.radio(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
            ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"]
        )
        
        if data_option == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
            train_path = './vladislav_work/processed_data.csv'
            additional_path = None
            
            if not os.path.exists(train_path):
                st.error("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.")
                data_option = "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"
        
        if data_option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ":
            train_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É", type=['csv'])
            additional_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", type=['csv'])
            
            if train_file:
                train_path = train_file
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                return
                
            additional_path = additional_file if additional_file else None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
        weeks_ahead = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", 1, 24, 4)
        
        # –ú–æ–¥–µ–ª—å: –æ–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        model_option = st.radio(
            "–ú–æ–¥–µ–ª—å:",
            ["–û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"]
        )
        
        if model_option == "–û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å":
            test_size = st.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", 0.1, 0.4, 0.2, 0.05)
            random_state = st.number_input("Random seed", 0, 1000, 42)
            
            train_button = st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
        else:
            model_path = './model/reinforcement_price_model.pkl'
            if not os.path.exists(model_path):
                st.error("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å.")
                model_option = "–û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å"
            else:
                predict_button = st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        if 'train_path' in locals():
            with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
                data = load_data(train_path)
                
                if data is not None:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–æ–π –∏ —Ü–µ–Ω–æ–π
                    date_column = 'dt'
                    price_column = '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    if date_column not in data.columns:
                        st.error(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π '{date_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
                        return
                    if price_column not in data.columns:
                        st.error(f"–ö–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω–æ–π '{price_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
                        return
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                    data[date_column] = pd.to_datetime(data[date_column])
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    st.header("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                    fig = plot_historical_prices(data, date_column, price_column)
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
                    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏"):
                        st.dataframe(data.sort_values(by=date_column, ascending=False))
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    additional_data = None
                    if additional_path:
                        with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...'):
                            additional_data = load_data(additional_path)
                            
                            if additional_data is not None:
                                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
                                    st.dataframe(additional_data)
                    
                    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    if model_option == "–û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å" and train_button:
                        with st.spinner('–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...'):
                            try:
                                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
                                model = ReinforcementPriceModel()
                                
                                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ print –≤ streamlit
                                with st.expander("–î–µ—Ç–∞–ª–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"):
                                    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                                    results = model.train(
                                        data, 
                                        additional_data=additional_data,
                                        test_size=test_size,
                                        random_state=random_state
                                    )
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                                    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
                                    metrics = results['metrics']
                                    cols = st.columns(3)
                                    cols[0].metric("MAE (–≤–∞–ª–∏–¥–∞—Ü–∏—è)", f"{metrics['val_mae']:.2f}")
                                    cols[1].metric("RMSE (–≤–∞–ª–∏–¥–∞—Ü–∏—è)", f"{metrics['val_rmse']:.2f}")
                                    cols[2].metric("R¬≤ (–≤–∞–ª–∏–¥–∞—Ü–∏—è)", f"{metrics['val_r2']:.4f}")
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                                    st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                                    feat_imp = results['feature_importance']
                                    st.dataframe(feat_imp.head(10))
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
                                model_path = model.save_model()
                                
                                st.success(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
                                
                                # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
                                st.info("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –í—ã–±–µ—Ä–∏—Ç–µ '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
                                
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
                                import traceback
                                st.error(traceback.format_exc())
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if model_option == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å" and predict_button:
                        with st.spinner('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞...'):
                            try:
                                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
                                model = ReinforcementPriceModel()
                                model.load_model()
                                
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (–ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö)
                                current_date = data[date_column].max()
                                
                                # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                                forecast = model.predict_future(
                                    data,
                                    additional_data=additional_data,
                                    weeks_ahead=weeks_ahead,
                                    current_date=current_date
                                )
                                
                                if forecast['success']:
                                    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                                    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                                    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ç–µ–Ω–¥–µ—Ä—É")
                                    recommendation_col, confidence_col = st.columns(2)
                                    
                                    recommendation_col.info(forecast['recommendation'])
                                    confidence_col.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ", forecast['confidence'])
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω
                                    st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É")
                                    
                                    metrics_cols = st.columns(3)
                                    metrics_cols[0].metric(
                                        "–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞", 
                                        f"{forecast['last_price']:.2f} —Ä—É–±.",
                                    )
                                    metrics_cols[1].metric(
                                        "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑", 
                                        f"{forecast['average_prediction']:.2f} —Ä—É–±.",
                                        f"{forecast['price_change_pct']:.2f}%"
                                    )
                                    metrics_cols[2].metric(
                                        "–ù–µ–¥–µ–ª—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ", 
                                        forecast['weeks_ahead']
                                    )
                                    
                                    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                                    forecast_fig = plot_forecast(data, forecast, date_column, price_column)
                                    st.plotly_chart(forecast_fig, use_container_width=True)
                                    
                                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º
                                    st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º")
                                    weekly_df = pd.DataFrame(forecast['weekly_predictions'])
                                    weekly_df['price'] = weekly_df['price'].round(2)
                                    st.dataframe(weekly_df)
                                    
                                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –Ω–µ–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                                    weekly_fig = px.line(
                                        weekly_df, 
                                        x='dt', 
                                        y='price', 
                                        title='–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É –ø–æ –Ω–µ–¥–µ–ª—è–º'
                                    )
                                    weekly_fig.update_layout(
                                        xaxis_title='–î–∞—Ç–∞',
                                        yaxis_title='–¶–µ–Ω–∞',
                                        height=400
                                    )
                                    st.plotly_chart(weekly_fig, use_container_width=True)
                                    
                                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–Ω—è—Ç–∏—é —Ä–µ—à–µ–Ω–∏–π
                                    st.subheader("–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞")
                                    
                                    if forecast['price_change_pct'] > 5:
                                        st.warning("""
                                        **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω!**
                                        
                                        –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ–¥–µ–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
                                        - –ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–Ω–¥–µ—Ä –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ–¥–µ–ª–∏
                                        - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π —Ç–µ–Ω–¥–µ—Ä –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω
                                        - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                                        """)
                                    elif forecast['price_change_pct'] < -5:
                                        st.success("""
                                        **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω!**
                                        
                                        –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ–¥–µ–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
                                        - –ü—Ä–æ–≤–µ—Å—Ç–∏ –∫—Ä—É–ø–Ω—ã–π —Ç–µ–Ω–¥–µ—Ä –Ω–∞ –≤–µ—Å—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
                                        - –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫
                                        - –£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –∑–∞–∫—É–ø–∫–∏, –ø–æ–∫–∞ —Ü–µ–Ω—ã —Å–Ω–∏–∂–∞—é—Ç—Å—è
                                        """)
                                    else:
                                        st.info("""
                                        **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω**
                                        
                                        –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ–¥–µ–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
                                        - –ü—Ä–æ–≤–æ–¥–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã —Å –æ–±—ã—á–Ω—ã–º –æ–±—ä–µ–º–æ–º
                                        - –°–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–æ–π –∑–∞–∫—É–ø–æ—á–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ
                                        - –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                                        """)
                                
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
                                import traceback
                                st.error(traceback.format_exc())
                    
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        import traceback
        st.error(traceback.format_exc())
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    with st.expander("–û —Å–∏—Å—Ç–µ–º–µ"):
        st.write("""
        ## –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É
        
        –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∑–∞–∫—É–ø–∞—é—â–µ–º—É –∞—Ä–º–∞—Ç—É—Ä—É, —ç–∫–æ–Ω–æ–º–∏—Ç—å, 
        –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø—Ä–æ–≥–Ω–æ–∑—ã –±—É–¥—É—â–∏—Ö —Ü–µ–Ω –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Ç–µ–Ω–¥–µ—Ä–æ–≤.
        
        ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É
        - –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ CatBoost –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
        - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä–µ–¥
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–º—É –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞
        
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–µ–Ω–∞—Ö
        2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        3. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
        4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        5. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """)

if __name__ == "__main__":
    main()